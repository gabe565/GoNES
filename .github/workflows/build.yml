name: Build

on:
  push: {}
  schedule:
    - cron: '41 8 5 * *'

env:
  LINUX_DEPENDENCIES: >
    libasound2-dev
    libc6-dev
    libgl1-mesa-dev
    libglu1-mesa-dev
    libxcursor-dev
    libxi-dev
    libxinerama-dev
    libxrandr-dev
    libxxf86vm-dev

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          cache: true
      - name: Install apt dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends $LINUX_DEPENDENCIES
      - name: Lint
        uses: golangci/golangci-lint-action@v3
        with:
          args: --timeout=5m
          skip-build-cache: true
          skip-pkg-cache: true

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          cache: true
      - name: Install apt dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends $LINUX_DEPENDENCIES
      - name: Test
        run: xvfb-run go test ./...

  build-native:
    name: Build Natively (${{ matrix.platform }})
    runs-on: ${{ matrix.runs-on }}
    needs: [lint, test]
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux-amd64
            runs-on: ubuntu-latest
            pre-build: |
              sudo apt-get update
              sudo apt-get install --no-install-recommends $LINUX_DEPENDENCIES
          - platform: darwin-amd64
            runs-on: macos-12
          - platform: darwin-arm64
            runs-on: macos-12
            envs: GOARCH=arm64
          - platform: windows-amd64
            runs-on: windows-latest
            extension: .exe
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
      - name: Get Go cache paths
        id: go-cache-path
        shell: bash
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT
      - name: Go cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.go-cache-path.outputs.go-build }}
            ${{ steps.go-cache-path.outputs.go-mod }}
          key: ${{ matrix.platform }}-go-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ matrix.platform }}-go-build-
      - name: Set envs
        if: matrix.envs
        shell: bash
        run: echo "$ENVS" >> $GITHUB_ENV
        env:
          ENVS: ${{ matrix.envs }}
      - name: Pre-build
        if: matrix.pre-build
        run: ${{ matrix.pre-build }}
      - name: Build
        run: |
          go build -ldflags='-w -s' -o dist/gones${{ matrix.extension }}
        env:
          CGO_ENABLED: "1"
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}
          path: dist

  build-container:
    name: Build in Container (${{ matrix.platform }})
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux-arm64
            docker-platform: linux/arm64/v8
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        id: setup-go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
      - name: Get Go cache paths
        id: go-cache-path
        shell: bash
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT
      - name: Go cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.go-cache-path.outputs.go-build }}
            ${{ steps.go-cache-path.outputs.go-mod }}
          key: ${{ matrix.platform }}-go-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ matrix.platform }}-go-build-
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build container
        uses: docker/build-push-action@v3
        with:
          context: .
          file: builder.Dockerfile
          tags: builder
          load: true
          platforms: ${{ matrix.docker-platform }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build
        run: |
          docker run --rm -i --platform=${{ matrix.docker-platform }} \
            -v "$(go env GOCACHE):/root/.cache/go-build" \
            -v "$(go env GOMODCACHE):/go/pkg/mod" \
            -v "$PWD:/app" \
            builder \
            go build -ldflags='-w -s' -o dist/gones${{ matrix.extension }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}
          path: dist
