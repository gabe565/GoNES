name: Build

on:
  push: {}
  schedule:
    - cron: '41 8 5 * *'

env:
  LINUX_DEPENDENCIES: >
    libasound2-dev
    libc6-dev
    libgl1-mesa-dev
    libglu1-mesa-dev
    libxcursor-dev
    libxi-dev
    libxinerama-dev
    libxrandr-dev
    libxxf86vm-dev

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: false
      - name: Install apt dependencies
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: ${{ env.LINUX_DEPENDENCIES }}
      - name: Lint
        uses: golangci/golangci-lint-action@v4
        with:
          args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Install apt dependencies
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: ${{ env.LINUX_DEPENDENCIES }}
      - name: Test
        run: xvfb-run go test ./... -coverprofile=coverage.txt -covermode=atomic

  build-windows:
    name: Build (windows)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Generate
        run: go generate -x
      - name: Build
        run: ./hack/build-windows.sh
      - name: Compress
        run: |
          cd dist
          zip -r ../gones_windows_amd64.zip GoNES-amd64.exe
          zip -r ../gones_windows_arm64.zip GoNES-arm64.exe
      - name: Upload Artifact (amd64)
        uses: actions/upload-artifact@v4
        with:
          name: gones_windows_amd64
          path: gones_windows_amd64.zip
      - name: Upload Artifact (arm64)
        uses: actions/upload-artifact@v4
        with:
          name: gones_windows_arm64
          path: gones_windows_arm64.zip

  build-darwin:
    name: Build (darwin)
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Generate
        run: go generate -x
      - name: Build
        run: ./hack/build-darwin.sh
      - name: Compress
        run: tar -cvf gones_darwin.tar.gz -C dist .
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gones_darwin
          path: gones_darwin.tar.gz

  build-linux-amd64:
    name: Build (linux-amd64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Install apt dependencies
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: ${{ env.LINUX_DEPENDENCIES }}
      - name: Generate
        run: go generate -x
      - name: Build
        env:
          CGO_ENABLED: "1"
        run: go build -ldflags='-w -s' -trimpath -tags gzip -o dist/gones
      - name: Compress
        run: tar -cvf gones_linux_amd64.tar.gz -C dist .
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gones_linux_amd64
          path: gones_linux_amd64.tar.gz

  build-linux-arm64:
    name: Build (linux-arm64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        id: setup-go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: hack/builder.Dockerfile
          tags: builder
          load: true
          platforms: linux/arm64/v8
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Generate
        run: go generate -x
      - name: Build
        run: |
          docker run --rm -i --platform=linux/arm64/v8 \
            -v "$(go env GOCACHE):/root/.cache/go-build" \
            -v "$(go env GOMODCACHE):/go/pkg/mod" \
            -v "$PWD:/app" \
            builder \
            go build -ldflags='-w -s' -trimpath -tags gzip -o dist/gones
      - name: Compress
        run: tar -cvf gones_linux_arm64.tar.gz -C dist .
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gones_linux_arm64
          path: gones_linux_arm64.tar.gz

  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        id: setup-go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Generate
        run: go generate -x
      - name: Build Go
        env:
          GOOS: js
          GOARCH: wasm
        run: go build -ldflags='-w -s' -trimpath -tags gzip -o web/src/assets/gones.wasm
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version-file: web/.nvmrc
          cache: npm
          cache-dependency-path: web/package-lock.json
      - name: Install Node dependencies
        run: npm --prefix web install --prefer-offline --no-audit
      - name: Build Node
        run: npm --prefix web run build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: web/dist

  deploy-web:
    name: Deploy Web
    if: github.ref == 'refs/heads/main'
    needs: build-web
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
