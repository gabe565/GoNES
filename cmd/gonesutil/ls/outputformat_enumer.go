// Code generated by "enumer -type OutputFormat -trimprefix OutputFormat -transform lower -values"; DO NOT EDIT.

package ls

import (
	"fmt"
	"strings"
)

const _OutputFormatName = "tablejsonyaml"

var _OutputFormatIndex = [...]uint8{0, 5, 9, 13}

const _OutputFormatLowerName = "tablejsonyaml"

func (i OutputFormat) String() string {
	if i >= OutputFormat(len(_OutputFormatIndex)-1) {
		return fmt.Sprintf("OutputFormat(%d)", i)
	}
	return _OutputFormatName[_OutputFormatIndex[i]:_OutputFormatIndex[i+1]]
}

func (OutputFormat) Values() []string {
	return OutputFormatStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OutputFormatNoOp() {
	var x [1]struct{}
	_ = x[OutputFormatTable-(0)]
	_ = x[OutputFormatJSON-(1)]
	_ = x[OutputFormatYAML-(2)]
}

var _OutputFormatValues = []OutputFormat{OutputFormatTable, OutputFormatJSON, OutputFormatYAML}

var _OutputFormatNameToValueMap = map[string]OutputFormat{
	_OutputFormatName[0:5]:       OutputFormatTable,
	_OutputFormatLowerName[0:5]:  OutputFormatTable,
	_OutputFormatName[5:9]:       OutputFormatJSON,
	_OutputFormatLowerName[5:9]:  OutputFormatJSON,
	_OutputFormatName[9:13]:      OutputFormatYAML,
	_OutputFormatLowerName[9:13]: OutputFormatYAML,
}

var _OutputFormatNames = []string{
	_OutputFormatName[0:5],
	_OutputFormatName[5:9],
	_OutputFormatName[9:13],
}

// OutputFormatString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OutputFormatString(s string) (OutputFormat, error) {
	if val, ok := _OutputFormatNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OutputFormatNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OutputFormat values", s)
}

// OutputFormatValues returns all values of the enum
func OutputFormatValues() []OutputFormat {
	return _OutputFormatValues
}

// OutputFormatStrings returns a slice of all String values of the enum
func OutputFormatStrings() []string {
	strs := make([]string, len(_OutputFormatNames))
	copy(strs, _OutputFormatNames)
	return strs
}

// IsAOutputFormat returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OutputFormat) IsAOutputFormat() bool {
	for _, v := range _OutputFormatValues {
		if i == v {
			return true
		}
	}
	return false
}
