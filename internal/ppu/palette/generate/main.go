package main

import (
	"cmp"
	"fmt"
	"math"
	"os"
	"strings"

	"github.com/gabe565/gones/internal/ppu/palette"

	. "github.com/dave/jennifer/jen"
)

const Attenuate = 0.746

const (
	Red   = "R"
	Green = "G"
	Blue  = "B"
)

func main() {
	f := NewFile("palette")
	f.HeaderComment("Code generated by internal/ppu/generate/main.go; DO NOT EDIT.")

	combinations := [][]string{
		{Red},
		{Green},
		{Blue},
		{Red, Green},
		{Red, Blue},
		{Green, Blue},
		{Red, Green, Blue},
	}

	arrLen := id16(len(palette.Default))

	for _, combination := range combinations {
		f.Var().Id("Emphasize"+strings.Join(combination, "")).Op("=").
			Index(arrLen).Qual("image/color", "RGBA").
			Values(DictFunc(func(d Dict) {
				for i, c := range palette.Default {
					// Don't attenuate $xE or $xF (black)
					if i&0xE != 0xE {
						for _, emphasis := range combination {
							switch emphasis {
							case Red:
								c.G = uint8(math.Round(float64(c.G) * Attenuate))
								c.B = uint8(math.Round(float64(c.B) * Attenuate))
							case Green:
								c.R = uint8(math.Round(float64(c.R) * Attenuate))
								c.B = uint8(math.Round(float64(c.B) * Attenuate))
							case Blue:
								c.R = uint8(math.Round(float64(c.R) * Attenuate))
								c.G = uint8(math.Round(float64(c.G) * Attenuate))
							}
						}
					}
					d[id16(i)] = Values(id16(c.R), id16(c.G), id16(c.B), id16(c.A))
				}
			})).Line()
	}

	out, err := os.Create("palette_emphasis.go")
	if err != nil {
		panic(err)
	}

	if err := f.Render(out); err != nil {
		panic(err)
	}

	if err = out.Close(); err != nil {
		panic(err)
	}
}

func id16[T cmp.Ordered](i T) *Statement {
	return Id(fmt.Sprintf("%#02X", i))
}
