package cpu

import (
	"fmt"
	"slices"
)

// OpCode defines an opcode and its parameters.
//
// See [6502 Instruction Reference].
//
// [6502 Instruction Reference]: https://www.nesdev.org/obelisk-6502-guide/reference.html
type OpCode struct {
	Name         InstructionName
	Len          uint8
	Cycles       uint8
	Mode         AddressingMode
	Exec         Instruction
	Undocumented bool
}

func (o *OpCode) String() string {
	undocumented := ' '
	if o.Undocumented {
		undocumented = '*'
	}
	return fmt.Sprintf(
		"$%02X %c%3s %d %d %s",
		o.Code(),
		undocumented,
		o.Name,
		o.Len,
		o.Cycles,
		o.Mode,
	)
}

func (o *OpCode) Code() int {
	return slices.Index(OpCodes, o)
}

// OpCodes is a list of supported opcodes.
//
// See [6502 Instruction Reference].
//
// [6502 Instruction Reference]: https://www.nesdev.org/obelisk-6502-guide/reference.html
//
//nolint:gochecknoglobals
var OpCodes = []*OpCode{
	0x00: {BRK, 1, 7, Implicit, brk, false},
	0x01: {ORA, 2, 6, IndirectX, ora, false},
	0x03: {SLO, 2, 8, IndirectX, slo, true},
	0x04: {NOP, 2, 3, ZeroPage, nop, true},
	0x05: {ORA, 2, 3, ZeroPage, ora, false},
	0x06: {ASL, 2, 5, ZeroPage, asl, false},
	0x07: {SLO, 2, 5, ZeroPage, slo, true},
	0x08: {PHP, 1, 3, Implicit, php, false},
	0x09: {ORA, 2, 2, Immediate, ora, false},
	0x0A: {ASL, 1, 2, Accumulator, asl, false},
	0x0B: {ANC, 2, 2, Immediate, anc, true},
	0x0C: {NOP, 3, 4, Absolute, nop, true},
	0x0D: {ORA, 3, 4, Absolute, ora, false},
	0x0E: {ASL, 3, 6, Absolute, asl, false},
	0x0F: {SLO, 3, 6, Absolute, slo, true},
	0x10: {BPL, 2, 2 /*+1 if branch succeeds, +2 if to a new page*/, Relative, bpl, false},
	0x11: {ORA, 2, 5 /*+1 if page crossed*/, IndirectY, ora, false},
	0x13: {SLO, 2, 8, IndirectY, slo, true},
	0x14: {NOP, 2, 4, ZeroPageX, nop, true},
	0x15: {ORA, 2, 4, ZeroPageX, ora, false},
	0x16: {ASL, 2, 6, ZeroPageX, asl, false},
	0x17: {SLO, 2, 6, ZeroPageX, slo, true},
	0x18: {CLC, 1, 2, Implicit, clc, false},
	0x19: {ORA, 3, 4 /*+1 if page crossed*/, AbsoluteY, ora, false},
	0x1A: {NOP, 1, 2, Implicit, nop, true},
	0x1B: {SLO, 3, 7, AbsoluteY, slo, true},
	0x1C: {NOP, 3, 4 /*+1 if page crossed*/, AbsoluteX, nop, true},
	0x1D: {ORA, 3, 4 /*+1 if page crossed*/, AbsoluteX, ora, false},
	0x1E: {ASL, 3, 7, AbsoluteX, asl, false},
	0x1F: {SLO, 3, 7, AbsoluteX, slo, true},
	0x20: {JSR, 3, 6, Implicit, jsr, false},
	0x21: {AND, 2, 6, IndirectX, and, false},
	0x23: {RLA, 2, 8, IndirectX, rla, true},
	0x24: {BIT, 2, 3, ZeroPage, bit, false},
	0x25: {AND, 2, 3, ZeroPage, and, false},
	0x26: {ROL, 2, 5, ZeroPage, rol, false},
	0x27: {RLA, 2, 5, ZeroPage, rla, true},
	0x28: {PLP, 1, 4, Implicit, plp, false},
	0x29: {AND, 2, 2, Immediate, and, false},
	0x2A: {ROL, 1, 2, Accumulator, rol, false},
	0x2B: {ANC, 2, 2, Immediate, anc, true},
	0x2C: {BIT, 3, 4, Absolute, bit, false},
	0x2D: {AND, 3, 4, Absolute, and, false},
	0x2E: {ROL, 3, 6, Absolute, rol, false},
	0x2F: {RLA, 3, 6, Absolute, rla, true},
	0x30: {BMI, 2, 2 /*+1 if branch succeeds, +2 if to a new page*/, Relative, bmi, false},
	0x31: {AND, 2, 5 /*+1 if page crossed*/, IndirectY, and, false},
	0x33: {RLA, 2, 8, IndirectY, rla, true},
	0x34: {NOP, 2, 4, ZeroPageX, nop, true},
	0x35: {AND, 2, 4, ZeroPageX, and, false},
	0x36: {ROL, 2, 6, ZeroPageX, rol, false},
	0x37: {RLA, 2, 6, ZeroPageX, rla, true},
	0x38: {SEC, 1, 2, Implicit, sec, false},
	0x39: {AND, 3, 4 /*+1 if page crossed*/, AbsoluteY, and, false},
	0x3A: {NOP, 1, 2, Implicit, nop, true},
	0x3B: {RLA, 3, 7, AbsoluteY, rla, true},
	0x3C: {NOP, 3, 4 /*+1 if page crossed*/, AbsoluteX, nop, true},
	0x3D: {AND, 3, 4 /*+1 if page crossed*/, AbsoluteX, and, false},
	0x3E: {ROL, 3, 7, AbsoluteX, rol, false},
	0x3F: {RLA, 3, 7, AbsoluteX, rla, true},
	0x40: {RTI, 1, 6, Implicit, rti, false},
	0x41: {EOR, 2, 6, IndirectX, eor, false},
	0x43: {SRE, 2, 8, IndirectX, sre, true},
	0x44: {NOP, 2, 3, ZeroPage, nop, true},
	0x45: {EOR, 2, 3, ZeroPage, eor, false},
	0x46: {LSR, 2, 5, ZeroPage, lsr, false},
	0x47: {SRE, 2, 5, ZeroPage, sre, true},
	0x48: {PHA, 1, 3, Implicit, pha, false},
	0x49: {EOR, 2, 2, Immediate, eor, false},
	0x4A: {LSR, 1, 2, Accumulator, lsr, false},
	0x4B: {ALR, 2, 2, Immediate, alr, true},
	0x4C: {JMP, 3, 3, Absolute, jmp, false}, // Acts as immediate
	0x4D: {EOR, 3, 4, Absolute, eor, false},
	0x4E: {LSR, 3, 6, Absolute, lsr, false},
	0x4F: {SRE, 3, 6, Absolute, sre, true},
	0x50: {BVC, 2, 2 /*+1 if branch succeeds, +2 if to a new page*/, Relative, bvc, false},
	0x51: {EOR, 2, 5 /*+1 if page crossed*/, IndirectY, eor, false},
	0x53: {SRE, 2, 8, IndirectY, sre, true},
	0x54: {NOP, 2, 4, ZeroPageX, nop, true},
	0x55: {EOR, 2, 4, ZeroPageX, eor, false},
	0x56: {LSR, 2, 6, ZeroPageX, lsr, false},
	0x57: {SRE, 2, 6, ZeroPageX, sre, true},
	0x58: {CLI, 1, 2, Implicit, cli, false},
	0x59: {EOR, 3, 4 /*+1 if page crossed*/, AbsoluteY, eor, false},
	0x5A: {NOP, 1, 2, Implicit, nop, true},
	0x5B: {SRE, 3, 7, AbsoluteY, sre, true},
	0x5C: {NOP, 3, 4 /*+1 if page crossed*/, AbsoluteX, nop, true},
	0x5D: {EOR, 3, 4 /*+1 if page crossed*/, AbsoluteX, eor, false},
	0x5E: {LSR, 3, 7, AbsoluteX, lsr, false},
	0x5F: {SRE, 3, 7, AbsoluteX, sre, true},
	0x60: {RTS, 1, 6, Implicit, rts, false},
	0x61: {ADC, 2, 6, IndirectX, adc, false},
	0x63: {RRA, 2, 8, IndirectX, rra, true},
	0x64: {NOP, 2, 3, ZeroPage, nop, true},
	0x65: {ADC, 2, 3, ZeroPage, adc, false},
	0x66: {ROR, 2, 5, ZeroPage, ror, false},
	0x67: {RRA, 2, 5, ZeroPage, rra, true},
	0x68: {PLA, 1, 4, Implicit, pla, false},
	0x69: {ADC, 2, 2, Immediate, adc, false},
	0x6A: {ROR, 1, 2, Accumulator, ror, false},
	0x6B: {ARR, 2, 2, Immediate, arr, true},
	0x6C: {JMP, 3, 5, Indirect, jmp, false}, // Indirect with 6502 bug
	0x6D: {ADC, 3, 4, Absolute, adc, false},
	0x6E: {ROR, 3, 6, Absolute, ror, false},
	0x6F: {RRA, 3, 6, Absolute, rra, true},
	0x70: {BVS, 2, 2 /*+1 if branch succeeds, +2 if to a new page*/, Relative, bvs, false},
	0x71: {ADC, 2, 5 /*+1 if page crossed*/, IndirectY, adc, false},
	0x73: {RRA, 2, 8, IndirectY, rra, true},
	0x74: {NOP, 2, 4, ZeroPageX, nop, true},
	0x75: {ADC, 2, 4, ZeroPageX, adc, false},
	0x76: {ROR, 2, 6, ZeroPageX, ror, false},
	0x77: {RRA, 2, 6, ZeroPageX, rra, true},
	0x78: {SEI, 1, 2, Implicit, sei, false},
	0x79: {ADC, 3, 4 /*+1 if page crossed*/, AbsoluteY, adc, false},
	0x7A: {NOP, 1, 2, Implicit, nop, true},
	0x7B: {RRA, 3, 7, AbsoluteY, rra, true},
	0x7C: {NOP, 3, 4 /*+1 if page crossed*/, AbsoluteX, nop, true},
	0x7D: {ADC, 3, 4 /*+1 if page crossed*/, AbsoluteX, adc, false},
	0x7E: {ROR, 3, 7, AbsoluteX, ror, false},
	0x7F: {RRA, 3, 7, AbsoluteX, rra, true},
	0x80: {NOP, 2, 2, Immediate, nop, true},
	0x81: {STA, 2, 6, IndirectX, sta, false},
	0x82: {NOP, 2, 2, Immediate, nop, true},
	0x83: {SAX, 2, 6, IndirectX, sax, true},
	0x84: {STY, 2, 3, ZeroPage, sty, false},
	0x85: {STA, 2, 3, ZeroPage, sta, false},
	0x86: {STX, 2, 3, ZeroPage, stx, false},
	0x87: {SAX, 2, 3, ZeroPage, sax, true},
	0x88: {DEY, 1, 2, Implicit, dey, false},
	0x89: {NOP, 2, 2, Immediate, nop, true},
	0x8A: {TXA, 1, 2, Implicit, txa, false},
	0x8B: {XAA, 2, 2, Immediate, xaa, true},
	0x8C: {STY, 3, 4, Absolute, sty, false},
	0x8D: {STA, 3, 4, Absolute, sta, false},
	0x8E: {STX, 3, 4, Absolute, stx, false},
	0x8F: {SAX, 3, 4, Absolute, sax, true},
	0x90: {BCC, 2, 2 /*+1 if branch succeeds, +2 if to a new page*/, Relative, bcc, false},
	0x91: {STA, 2, 6, IndirectY, sta, false},
	0x93: {AHX, 2, 6, IndirectY, ahx, true},
	0x94: {STY, 2, 4, ZeroPageX, sty, false},
	0x95: {STA, 2, 4, ZeroPageX, sta, false},
	0x96: {STX, 2, 4, ZeroPageY, stx, false},
	0x97: {SAX, 2, 4, ZeroPageY, sax, true},
	0x98: {TYA, 1, 2, Implicit, tya, false},
	0x99: {STA, 3, 5, AbsoluteY, sta, false},
	0x9A: {TXS, 1, 2, Implicit, txs, false},
	0x9B: {TAS, 3, 5, AbsoluteY, tas, true},
	0x9C: {SHY, 3, 5, AbsoluteX, shy, true},
	0x9D: {STA, 3, 5, AbsoluteX, sta, false},
	0x9E: {SHX, 3, 5, AbsoluteY, shx, true},
	0x9F: {AHX, 3, 5, AbsoluteY, ahx, true},
	0xA0: {LDY, 2, 2, Immediate, ldy, false},
	0xA1: {LDA, 2, 6, IndirectX, lda, false},
	0xA2: {LDX, 2, 2, Immediate, ldx, false},
	0xA3: {LAX, 2, 6, IndirectX, lax, true},
	0xA4: {LDY, 2, 3, ZeroPage, ldy, false},
	0xA5: {LDA, 2, 3, ZeroPage, lda, false},
	0xA6: {LDX, 2, 3, ZeroPage, ldx, false},
	0xA7: {LAX, 2, 3, ZeroPage, lax, true},
	0xA8: {TAY, 1, 2, Implicit, tay, false},
	0xA9: {LDA, 2, 2, Immediate, lda, false},
	0xAA: {TAX, 1, 2, Implicit, tax, false},
	0xAB: {LXA, 2, 2, Immediate, lxa, true},
	0xAC: {LDY, 3, 4, Absolute, ldy, false},
	0xAD: {LDA, 3, 4, Absolute, lda, false},
	0xAE: {LDX, 3, 4, Absolute, ldx, false},
	0xAF: {LAX, 3, 4, Absolute, lax, true},
	0xB0: {BCS, 2, 2 /*+1 if branch succeeds, +2 if to a new page*/, Relative, bcs, false},
	0xB1: {LDA, 2, 5 /*+1 if page crossed*/, IndirectY, lda, false},
	0xB3: {LAX, 2, 5, IndirectY, lax, true},
	0xB4: {LDY, 2, 4, ZeroPageX, ldy, false},
	0xB5: {LDA, 2, 4, ZeroPageX, lda, false},
	0xB6: {LDX, 2, 4, ZeroPageY, ldx, false},
	0xB7: {LAX, 2, 4, ZeroPageY, lax, true},
	0xB8: {CLV, 1, 2, Implicit, clv, false},
	0xB9: {LDA, 3, 4 /*+1 if page crossed*/, AbsoluteY, lda, false},
	0xBA: {TSX, 1, 2, Implicit, tsx, false},
	0xBB: {LAS, 3, 4 /*+1 if page crossed*/, AbsoluteY, las, true},
	0xBC: {LDY, 3, 4 /*+1 if page crossed*/, AbsoluteX, ldy, false},
	0xBD: {LDA, 3, 4 /*+1 if page crossed*/, AbsoluteX, lda, false},
	0xBE: {LDX, 3, 4 /*+1 if page crossed*/, AbsoluteY, ldx, false},
	0xBF: {LAX, 3, 4 /*+1 if page crossed*/, AbsoluteY, lax, true},
	0xC0: {CPY, 2, 2, Immediate, cpy, false},
	0xC1: {CMP, 2, 6, IndirectX, cmp, false},
	0xC2: {NOP, 2, 2, Immediate, nop, true},
	0xC3: {DCP, 2, 8, IndirectX, dcp, true},
	0xC4: {CPY, 2, 3, ZeroPage, cpy, false},
	0xC5: {CMP, 2, 3, ZeroPage, cmp, false},
	0xC6: {DEC, 2, 5, ZeroPage, dec, false},
	0xC7: {DCP, 2, 5, ZeroPage, dcp, true},
	0xC8: {INY, 1, 2, Implicit, iny, false},
	0xC9: {CMP, 2, 2, Immediate, cmp, false},
	0xCA: {DEX, 1, 2, Implicit, dex, false},
	0xCB: {AXS, 2, 2, Immediate, axs, true},
	0xCC: {CPY, 3, 4, Absolute, cpy, false},
	0xCD: {CMP, 3, 4, Absolute, cmp, false},
	0xCE: {DEC, 3, 6, Absolute, dec, false},
	0xCF: {DCP, 3, 6, Absolute, dcp, true},
	0xD0: {BNE, 2, 2 /*+1 if branch succeeds, +2 if to a new page*/, Relative, bne, false},
	0xD1: {CMP, 2, 5 /*+1 if page crossed*/, IndirectY, cmp, false},
	0xD3: {DCP, 2, 8, IndirectY, dcp, true},
	0xD4: {NOP, 2, 4, ZeroPageX, nop, true},
	0xD5: {CMP, 2, 4, ZeroPageX, cmp, false},
	0xD6: {DEC, 2, 6, ZeroPageX, dec, false},
	0xD7: {DCP, 2, 6, ZeroPageX, dcp, true},
	0xD8: {CLD, 1, 2, Implicit, cld, false},
	0xD9: {CMP, 3, 4 /*+1 if page crossed*/, AbsoluteY, cmp, false},
	0xDA: {NOP, 1, 2, Implicit, nop, true},
	0xDB: {DCP, 3, 7, AbsoluteY, dcp, true},
	0xDC: {NOP, 3, 4 /*+1 if page crossed*/, AbsoluteX, nop, true},
	0xDD: {CMP, 3, 4 /*+1 if page crossed*/, AbsoluteX, cmp, false},
	0xDE: {DEC, 3, 7, AbsoluteX, dec, false},
	0xDF: {DCP, 3, 7, AbsoluteX, dcp, true},
	0xE0: {CPX, 2, 2, Immediate, cpx, false},
	0xE1: {SBC, 2, 6, IndirectX, sbc, false},
	0xE2: {NOP, 2, 2, Immediate, nop, true},
	0xE3: {ISB, 2, 8, IndirectX, isb, true},
	0xE4: {CPX, 2, 3, ZeroPage, cpx, false},
	0xE5: {SBC, 2, 3, ZeroPage, sbc, false},
	0xE6: {INC, 2, 5, ZeroPage, inc, false},
	0xE7: {ISB, 2, 5, ZeroPage, isb, true},
	0xE8: {INX, 1, 2, Implicit, inx, false},
	0xE9: {SBC, 2, 2, Immediate, sbc, false},
	0xEA: {NOP, 1, 2, Implicit, nop, false},
	0xEB: {SBC, 2, 2, Immediate, sbc, true},
	0xEC: {CPX, 3, 4, Absolute, cpx, false},
	0xED: {SBC, 3, 4, Absolute, sbc, false},
	0xEE: {INC, 3, 6, Absolute, inc, false},
	0xEF: {ISB, 3, 6, Absolute, isb, true},
	0xF0: {BEQ, 2, 2 /*+1 if branch succeeds, +2 if to a new page*/, Relative, beq, false},
	0xF1: {SBC, 2, 5 /*+1 if page crossed*/, IndirectY, sbc, false},
	0xF3: {ISB, 2, 8, IndirectY, isb, true},
	0xF4: {NOP, 2, 4, ZeroPageX, nop, true},
	0xF5: {SBC, 2, 4, ZeroPageX, sbc, false},
	0xF6: {INC, 2, 6, ZeroPageX, inc, false},
	0xF7: {ISB, 2, 6, ZeroPageX, isb, true},
	0xF8: {SED, 1, 2, Implicit, sed, false},
	0xF9: {SBC, 3, 4 /*+1 if page crossed*/, AbsoluteY, sbc, false},
	0xFA: {NOP, 1, 2, Implicit, nop, true},
	0xFB: {ISB, 3, 7, AbsoluteY, isb, true},
	0xFC: {NOP, 3, 4 /*+1 if page crossed*/, AbsoluteX, nop, true},
	0xFD: {SBC, 3, 4 /*+1 if page crossed*/, AbsoluteX, sbc, false},
	0xFE: {INC, 3, 7, AbsoluteX, inc, false},
	0xFF: {ISB, 3, 7, AbsoluteX, isb, true},
}
