package cpu

import (
	"fmt"
)

// OpCode defines an opcode and its parameters.
//
// See [6502 Instruction Reference].
//
// [6502 Instruction Reference]: https://www.nesdev.org/obelisk-6502-guide/reference.html
type OpCode struct {
	Mnemonic string
	Code     byte
	Len      uint8
	Cycles   uint8
	Mode     AddressingMode
	Exec     Instruction
}

func (o OpCode) String() string {
	return fmt.Sprintf(
		"{$%02X %s %d %d %s}",
		o.Code,
		o.Mnemonic,
		o.Len,
		o.Cycles,
		o.Mode,
	)
}

// OpCodes is a list of supported opcodes.
//
// See [6502 Instruction Reference].
//
// [6502 Instruction Reference]: https://www.nesdev.org/obelisk-6502-guide/reference.html
var OpCodes = [...]OpCode{
	0x00: {"BRK", 0x00, 1, 7, Implicit, brk},
	0x01: {"ORA", 0x01, 2, 6, IndirectX, ora},
	0x03: {"*SLO", 0x03, 2, 8, IndirectX, slo},
	0x04: {"*NOP", 0x04, 2, 3, ZeroPage, nop},
	0x05: {"ORA", 0x05, 2, 3, ZeroPage, ora},
	0x06: {"ASL", 0x06, 2, 5, ZeroPage, asl},
	0x07: {"*SLO", 0x07, 2, 5, ZeroPage, slo},
	0x08: {"PHP", 0x08, 1, 3, Implicit, php},
	0x09: {"ORA", 0x09, 2, 2, Immediate, ora},
	0x0A: {"ASL", 0x0A, 1, 2, Accumulator, asl},
	0x0B: {"*ANC", 0x0B, 2, 2, Immediate, anc},
	0x0C: {"*NOP", 0x0C, 3, 4, Absolute, nop},
	0x0D: {"ORA", 0x0D, 3, 4, Absolute, ora},
	0x0E: {"ASL", 0x0E, 3, 6, Absolute, asl},
	0x0F: {"*SLO", 0x0F, 3, 6, Absolute, slo},
	0x10: {"BPL", 0x10, 2, 2 /*+1 if branch succeeds, +2 if to a new page*/, Relative, bpl},
	0x11: {"ORA", 0x11, 2, 5 /*+1 if page crossed*/, IndirectY, ora},
	0x13: {"*SLO", 0x13, 2, 8, IndirectY, slo},
	0x14: {"*NOP", 0x14, 2, 4, ZeroPageX, nop},
	0x15: {"ORA", 0x15, 2, 4, ZeroPageX, ora},
	0x16: {"ASL", 0x16, 2, 6, ZeroPageX, asl},
	0x17: {"*SLO", 0x17, 2, 6, ZeroPageX, slo},
	0x18: {"CLC", 0x18, 1, 2, Implicit, clc},
	0x19: {"ORA", 0x19, 3, 4 /*+1 if page crossed*/, AbsoluteY, ora},
	0x1A: {"*NOP", 0x1A, 1, 2, Implicit, nop},
	0x1B: {"*SLO", 0x1B, 3, 7, AbsoluteY, slo},
	0x1C: {"*NOP", 0x1C, 3, 4 /*+1 if page crossed*/, AbsoluteX, nop},
	0x1D: {"ORA", 0x1D, 3, 4 /*+1 if page crossed*/, AbsoluteX, ora},
	0x1E: {"ASL", 0x1E, 3, 7, AbsoluteX, asl},
	0x1F: {"*SLO", 0x1F, 3, 7, AbsoluteX, slo},
	0x20: {"JSR", 0x20, 3, 6, Implicit, jsr},
	0x21: {"AND", 0x21, 2, 6, IndirectX, and},
	0x23: {"*RLA", 0x23, 2, 8, IndirectX, rla},
	0x24: {"BIT", 0x24, 2, 3, ZeroPage, bit},
	0x25: {"AND", 0x25, 2, 3, ZeroPage, and},
	0x26: {"ROL", 0x26, 2, 5, ZeroPage, rol},
	0x27: {"*RLA", 0x27, 2, 5, ZeroPage, rla},
	0x28: {"PLP", 0x28, 1, 4, Implicit, plp},
	0x29: {"AND", 0x29, 2, 2, Immediate, and},
	0x2A: {"ROL", 0x2A, 1, 2, Accumulator, rol},
	0x2B: {"*ANC", 0x2B, 2, 2, Immediate, anc},
	0x2C: {"BIT", 0x2C, 3, 4, Absolute, bit},
	0x2D: {"AND", 0x2D, 3, 4, Absolute, and},
	0x2E: {"ROL", 0x2E, 3, 6, Absolute, rol},
	0x2F: {"*RLA", 0x2F, 3, 6, Absolute, rla},
	0x30: {"BMI", 0x30, 2, 2 /*+1 if branch succeeds, +2 if to a new page*/, Relative, bmi},
	0x31: {"AND", 0x31, 2, 5 /*+1 if page crossed*/, IndirectY, and},
	0x33: {"*RLA", 0x33, 2, 8, IndirectY, rla},
	0x34: {"*NOP", 0x34, 2, 4, ZeroPageX, nop},
	0x35: {"AND", 0x35, 2, 4, ZeroPageX, and},
	0x36: {"ROL", 0x36, 2, 6, ZeroPageX, rol},
	0x37: {"*RLA", 0x37, 2, 6, ZeroPageX, rla},
	0x38: {"SEC", 0x38, 1, 2, Implicit, sec},
	0x39: {"AND", 0x39, 3, 4 /*+1 if page crossed*/, AbsoluteY, and},
	0x3A: {"*NOP", 0x3A, 1, 2, Implicit, nop},
	0x3B: {"*RLA", 0x3B, 3, 7, AbsoluteY, rla},
	0x3C: {"*NOP", 0x3C, 3, 4 /*+1 if page crossed*/, AbsoluteX, nop},
	0x3D: {"AND", 0x3D, 3, 4 /*+1 if page crossed*/, AbsoluteX, and},
	0x3E: {"ROL", 0x3E, 3, 7, AbsoluteX, rol},
	0x3F: {"*RLA", 0x3F, 3, 7, AbsoluteX, rla},
	0x40: {"RTI", 0x40, 1, 6, Implicit, rti},
	0x41: {"EOR", 0x41, 2, 6, IndirectX, eor},
	0x43: {"*SRE", 0x43, 2, 8, IndirectX, sre},
	0x44: {"*NOP", 0x44, 2, 3, ZeroPage, nop},
	0x45: {"EOR", 0x45, 2, 3, ZeroPage, eor},
	0x46: {"LSR", 0x46, 2, 5, ZeroPage, lsr},
	0x47: {"*SRE", 0x47, 2, 5, ZeroPage, sre},
	0x48: {"PHA", 0x48, 1, 3, Implicit, pha},
	0x49: {"EOR", 0x49, 2, 2, Immediate, eor},
	0x4A: {"LSR", 0x4A, 1, 2, Accumulator, lsr},
	0x4B: {"*ALR", 0x4B, 2, 2, Immediate, alr},
	0x4C: {"JMP", 0x4C, 3, 3, Absolute, jmp}, // Acts as immediate
	0x4D: {"EOR", 0x4D, 3, 4, Absolute, eor},
	0x4E: {"LSR", 0x4E, 3, 6, Absolute, lsr},
	0x4F: {"*SRE", 0x4F, 3, 6, Absolute, sre},
	0x50: {"BVC", 0x50, 2, 2 /*+1 if branch succeeds, +2 if to a new page*/, Relative, bvc},
	0x51: {"EOR", 0x51, 2, 5 /*+1 if page crossed*/, IndirectY, eor},
	0x53: {"*SRE", 0x53, 2, 8, IndirectY, sre},
	0x54: {"*NOP", 0x54, 2, 4, ZeroPageX, nop},
	0x55: {"EOR", 0x55, 2, 4, ZeroPageX, eor},
	0x56: {"LSR", 0x56, 2, 6, ZeroPageX, lsr},
	0x57: {"*SRE", 0x57, 2, 6, ZeroPageX, sre},
	0x58: {"CLI", 0x58, 1, 2, Implicit, cli},
	0x59: {"EOR", 0x59, 3, 4 /*+1 if page crossed*/, AbsoluteY, eor},
	0x5A: {"*NOP", 0x5A, 1, 2, Implicit, nop},
	0x5B: {"*SRE", 0x5B, 3, 7, AbsoluteY, sre},
	0x5C: {"*NOP", 0x5C, 3, 4 /*+1 if page crossed*/, AbsoluteX, nop},
	0x5D: {"EOR", 0x5D, 3, 4 /*+1 if page crossed*/, AbsoluteX, eor},
	0x5E: {"LSR", 0x5E, 3, 7, AbsoluteX, lsr},
	0x5F: {"*SRE", 0x5F, 3, 7, AbsoluteX, sre},
	0x60: {"RTS", 0x60, 1, 6, Implicit, rts},
	0x61: {"ADC", 0x61, 2, 6, IndirectX, adc},
	0x63: {"*RRA", 0x63, 2, 8, IndirectX, rra},
	0x64: {"*NOP", 0x64, 2, 3, ZeroPage, nop},
	0x65: {"ADC", 0x65, 2, 3, ZeroPage, adc},
	0x66: {"ROR", 0x66, 2, 5, ZeroPage, ror},
	0x67: {"*RRA", 0x67, 2, 5, ZeroPage, rra},
	0x68: {"PLA", 0x68, 1, 4, Implicit, pla},
	0x69: {"ADC", 0x69, 2, 2, Immediate, adc},
	0x6A: {"ROR", 0x6A, 1, 2, Accumulator, ror},
	0x6B: {"*ARR", 0x6B, 2, 2, Immediate, arr},
	0x6C: {"JMP", 0x6C, 3, 5, Indirect, jmp}, // Indirect with 6502 bug
	0x6D: {"ADC", 0x6D, 3, 4, Absolute, adc},
	0x6E: {"ROR", 0x6E, 3, 6, Absolute, ror},
	0x6F: {"*RRA", 0x6F, 3, 6, Absolute, rra},
	0x70: {"BVS", 0x70, 2, 2 /*+1 if branch succeeds, +2 if to a new page*/, Relative, bvs},
	0x71: {"ADC", 0x71, 2, 5 /*+1 if page crossed*/, IndirectY, adc},
	0x73: {"*RRA", 0x73, 2, 8, IndirectY, rra},
	0x74: {"*NOP", 0x74, 2, 4, ZeroPageX, nop},
	0x75: {"ADC", 0x75, 2, 4, ZeroPageX, adc},
	0x76: {"ROR", 0x76, 2, 6, ZeroPageX, ror},
	0x77: {"*RRA", 0x77, 2, 6, ZeroPageX, rra},
	0x78: {"SEI", 0x78, 1, 2, Implicit, sei},
	0x79: {"ADC", 0x79, 3, 4 /*+1 if page crossed*/, AbsoluteY, adc},
	0x7A: {"*NOP", 0x7A, 1, 2, Implicit, nop},
	0x7B: {"*RRA", 0x7B, 3, 7, AbsoluteY, rra},
	0x7C: {"*NOP", 0x7C, 3, 4 /*+1 if page crossed*/, AbsoluteX, nop},
	0x7D: {"ADC", 0x7D, 3, 4 /*+1 if page crossed*/, AbsoluteX, adc},
	0x7E: {"ROR", 0x7E, 3, 7, AbsoluteX, ror},
	0x7F: {"*RRA", 0x7F, 3, 7, AbsoluteX, rra},
	0x80: {"*NOP", 0x80, 2, 2, Immediate, nop},
	0x81: {"STA", 0x81, 2, 6, IndirectX, sta},
	0x82: {"*NOP", 0x82, 2, 2, Immediate, nop},
	0x83: {"*SAX", 0x83, 2, 6, IndirectX, sax},
	0x84: {"STY", 0x84, 2, 3, ZeroPage, sty},
	0x85: {"STA", 0x85, 2, 3, ZeroPage, sta},
	0x86: {"STX", 0x86, 2, 3, ZeroPage, stx},
	0x87: {"*SAX", 0x87, 2, 3, ZeroPage, sax},
	0x88: {"DEY", 0x88, 1, 2, Implicit, dey},
	0x89: {"*NOP", 0x89, 2, 2, Immediate, nop},
	0x8A: {"TXA", 0x8A, 1, 2, Implicit, txa},
	0x8B: {"*XAA", 0x8B, 2, 2, Immediate, xaa},
	0x8C: {"STY", 0x8C, 3, 4, Absolute, sty},
	0x8D: {"STA", 0x8D, 3, 4, Absolute, sta},
	0x8E: {"STX", 0x8E, 3, 4, Absolute, stx},
	0x8F: {"*SAX", 0x8F, 3, 4, Absolute, sax},
	0x90: {"BCC", 0x90, 2, 2 /*+1 if branch succeeds, +2 if to a new page*/, Relative, bcc},
	0x91: {"STA", 0x91, 2, 6, IndirectY, sta},
	0x93: {"*AHX", 0x93, 2, 6, IndirectY, ahx},
	0x94: {"STY", 0x94, 2, 4, ZeroPageX, sty},
	0x95: {"STA", 0x95, 2, 4, ZeroPageX, sta},
	0x96: {"STX", 0x96, 2, 4, ZeroPageY, stx},
	0x97: {"*SAX", 0x97, 2, 4, ZeroPageY, sax},
	0x98: {"TYA", 0x98, 1, 2, Implicit, tya},
	0x99: {"STA", 0x99, 3, 5, AbsoluteY, sta},
	0x9A: {"TXS", 0x9A, 1, 2, Implicit, txs},
	0x9B: {"*TAS", 0x9B, 3, 5, AbsoluteY, tas},
	0x9C: {"*SHY", 0x9C, 3, 5, AbsoluteX, shy},
	0x9D: {"STA", 0x9D, 3, 5, AbsoluteX, sta},
	0x9E: {"*SHX", 0x9E, 3, 5, AbsoluteY, shx},
	0x9F: {"*AHX", 0x9F, 3, 5, AbsoluteY, ahx},
	0xA0: {"LDY", 0xA0, 2, 2, Immediate, ldy},
	0xA1: {"LDA", 0xA1, 2, 6, IndirectX, lda},
	0xA2: {"LDX", 0xA2, 2, 2, Immediate, ldx},
	0xA3: {"*LAX", 0xA3, 2, 6, IndirectX, lax},
	0xA4: {"LDY", 0xA4, 2, 3, ZeroPage, ldy},
	0xA5: {"LDA", 0xA5, 2, 3, ZeroPage, lda},
	0xA6: {"LDX", 0xA6, 2, 3, ZeroPage, ldx},
	0xA7: {"*LAX", 0xA7, 2, 3, ZeroPage, lax},
	0xA8: {"TAY", 0xA8, 1, 2, Implicit, tay},
	0xA9: {"LDA", 0xA9, 2, 2, Immediate, lda},
	0xAA: {"TAX", 0xAA, 1, 2, Implicit, tax},
	0xAB: {"*LXA", 0xAB, 2, 2, Immediate, lxa},
	0xAC: {"LDY", 0xAC, 3, 4, Absolute, ldy},
	0xAD: {"LDA", 0xAD, 3, 4, Absolute, lda},
	0xAE: {"LDX", 0xAE, 3, 4, Absolute, ldx},
	0xAF: {"*LAX", 0xAF, 3, 4, Absolute, lax},
	0xB0: {"BCS", 0xB0, 2, 2 /*+1 if branch succeeds, +2 if to a new page*/, Relative, bcs},
	0xB1: {"LDA", 0xB1, 2, 5 /*+1 if page crossed*/, IndirectY, lda},
	0xB3: {"*LAX", 0xB3, 2, 5, IndirectY, lax},
	0xB4: {"LDY", 0xB4, 2, 4, ZeroPageX, ldy},
	0xB5: {"LDA", 0xB5, 2, 4, ZeroPageX, lda},
	0xB6: {"LDX", 0xB6, 2, 4, ZeroPageY, ldx},
	0xB7: {"*LAX", 0xB7, 2, 4, ZeroPageY, lax},
	0xB8: {"CLV", 0xB8, 1, 2, Implicit, clv},
	0xB9: {"LDA", 0xB9, 3, 4 /*+1 if page crossed*/, AbsoluteY, lda},
	0xBA: {"TSX", 0xBA, 1, 2, Implicit, tsx},
	0xBB: {"*LAS", 0xBB, 3, 4 /*+1 if page crossed*/, AbsoluteY, las},
	0xBC: {"LDY", 0xBC, 3, 4 /*+1 if page crossed*/, AbsoluteX, ldy},
	0xBD: {"LDA", 0xBD, 3, 4 /*+1 if page crossed*/, AbsoluteX, lda},
	0xBE: {"LDX", 0xBE, 3, 4 /*+1 if page crossed*/, AbsoluteY, ldx},
	0xBF: {"*LAX", 0xBF, 3, 4 /*+1 if page crossed*/, AbsoluteY, lax},
	0xC0: {"CPY", 0xC0, 2, 2, Immediate, cpy},
	0xC1: {"CMP", 0xC1, 2, 6, IndirectX, cmp},
	0xC2: {"*NOP", 0xC2, 2, 2, Immediate, nop},
	0xC3: {"*DCP", 0xC3, 2, 8, IndirectX, dcp},
	0xC4: {"CPY", 0xC4, 2, 3, ZeroPage, cpy},
	0xC5: {"CMP", 0xC5, 2, 3, ZeroPage, cmp},
	0xC6: {"DEC", 0xC6, 2, 5, ZeroPage, dec},
	0xC7: {"*DCP", 0xC7, 2, 5, ZeroPage, dcp},
	0xC8: {"INY", 0xC8, 1, 2, Implicit, iny},
	0xC9: {"CMP", 0xC9, 2, 2, Immediate, cmp},
	0xCA: {"DEX", 0xCA, 1, 2, Implicit, dex},
	0xCB: {"*AXS", 0xCB, 2, 2, Immediate, axs},
	0xCC: {"CPY", 0xCC, 3, 4, Absolute, cpy},
	0xCD: {"CMP", 0xCD, 3, 4, Absolute, cmp},
	0xCE: {"DEC", 0xCE, 3, 6, Absolute, dec},
	0xCF: {"*DCP", 0xCF, 3, 6, Absolute, dcp},
	0xD0: {"BNE", 0xD0, 2, 2 /*+1 if branch succeeds, +2 if to a new page*/, Relative, bne},
	0xD1: {"CMP", 0xD1, 2, 5 /*+1 if page crossed*/, IndirectY, cmp},
	0xD3: {"*DCP", 0xD3, 2, 8, IndirectY, dcp},
	0xD4: {"*NOP", 0xD4, 2, 4, ZeroPageX, nop},
	0xD5: {"CMP", 0xD5, 2, 4, ZeroPageX, cmp},
	0xD6: {"DEC", 0xD6, 2, 6, ZeroPageX, dec},
	0xD7: {"*DCP", 0xD7, 2, 6, ZeroPageX, dcp},
	0xD8: {"CLD", 0xD8, 1, 2, Implicit, cld},
	0xD9: {"CMP", 0xD9, 3, 4 /*+1 if page crossed*/, AbsoluteY, cmp},
	0xDA: {"*NOP", 0xDA, 1, 2, Implicit, nop},
	0xDB: {"*DCP", 0xDB, 3, 7, AbsoluteY, dcp},
	0xDC: {"*NOP", 0xDC, 3, 4 /*+1 if page crossed*/, AbsoluteX, nop},
	0xDD: {"CMP", 0xDD, 3, 4 /*+1 if page crossed*/, AbsoluteX, cmp},
	0xDE: {"DEC", 0xDE, 3, 7, AbsoluteX, dec},
	0xDF: {"*DCP", 0xDF, 3, 7, AbsoluteX, dcp},
	0xE0: {"CPX", 0xE0, 2, 2, Immediate, cpx},
	0xE1: {"SBC", 0xE1, 2, 6, IndirectX, sbc},
	0xE2: {"*NOP", 0xE2, 2, 2, Immediate, nop},
	0xE3: {"*ISB", 0xE3, 2, 8, IndirectX, isb},
	0xE4: {"CPX", 0xE4, 2, 3, ZeroPage, cpx},
	0xE5: {"SBC", 0xE5, 2, 3, ZeroPage, sbc},
	0xE6: {"INC", 0xE6, 2, 5, ZeroPage, inc},
	0xE7: {"*ISB", 0xE7, 2, 5, ZeroPage, isb},
	0xE8: {"INX", 0xE8, 1, 2, Implicit, inx},
	0xE9: {"SBC", 0xE9, 2, 2, Immediate, sbc},
	0xEA: {"NOP", 0xEA, 1, 2, Implicit, nop},
	0xEB: {"*SBC", 0xEB, 2, 2, Immediate, sbc},
	0xEC: {"CPX", 0xEC, 3, 4, Absolute, cpx},
	0xED: {"SBC", 0xED, 3, 4, Absolute, sbc},
	0xEE: {"INC", 0xEE, 3, 6, Absolute, inc},
	0xEF: {"*ISB", 0xEF, 3, 6, Absolute, isb},
	0xF0: {"BEQ", 0xF0, 2, 2 /*+1 if branch succeeds, +2 if to a new page*/, Relative, beq},
	0xF1: {"SBC", 0xF1, 2, 5 /*+1 if page crossed*/, IndirectY, sbc},
	0xF3: {"*ISB", 0xF3, 2, 8, IndirectY, isb},
	0xF4: {"*NOP", 0xF4, 2, 4, ZeroPageX, nop},
	0xF5: {"SBC", 0xF5, 2, 4, ZeroPageX, sbc},
	0xF6: {"INC", 0xF6, 2, 6, ZeroPageX, inc},
	0xF7: {"*ISB", 0xF7, 2, 6, ZeroPageX, isb},
	0xF8: {"SED", 0xF8, 1, 2, Implicit, sed},
	0xF9: {"SBC", 0xF9, 3, 4 /*+1 if page crossed*/, AbsoluteY, sbc},
	0xFA: {"*NOP", 0xFA, 1, 2, Implicit, nop},
	0xFB: {"*ISB", 0xFB, 3, 7, AbsoluteY, isb},
	0xFC: {"*NOP", 0xFC, 3, 4 /*+1 if page crossed*/, AbsoluteX, nop},
	0xFD: {"SBC", 0xFD, 3, 4 /*+1 if page crossed*/, AbsoluteX, sbc},
	0xFE: {"INC", 0xFE, 3, 7, AbsoluteX, inc},
	0xFF: {"*ISB", 0xFF, 3, 7, AbsoluteX, isb},
}
